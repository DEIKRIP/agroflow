import React, { createContext, useContext, useState, useEffect, useCallback } from 'react';
import { supabase } from '../lib/supabase';

const FarmersContext = createContext();

export const FarmersProvider = ({ children }) => {
  const [farmers, setFarmers] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [currentFarmer, setCurrentFarmer] = useState(null);
  const [total, setTotal] = useState(0);
  const [page, setPage] = useState(1);
  const [pageSize] = useState(10);
  const [filters, setFilters] = useState({});

  // Cargar todos los agricultores
  const loadFarmers = useCallback(async () => {
    try {
      setLoading(true);
      setError(null);
      
      // Construir consulta base
      let query = supabase
        .from('farmers')
        .select('*', { count: 'exact' });
      
      // Aplicar filtros
      if (filters.search) {
        query = query.or(`first_name.ilike.%${filters.search}%,last_name.ilike.%${filters.search}%,document.ilike.%${filters.search}%`);
      }
      
      if (filters.status) {
        query = query.eq('status', filters.status);
      }
      
      // PaginaciÃ³n
      const from = (page - 1) * pageSize;
      const to = from + pageSize - 1;
      
      query = query.range(from, to).order('created_at', { ascending: false });
      
      // Ejecutar consulta
      const { data, error: fetchError, count } = await query;
      
      setFarmers(data || []);
      setError(null);
    } catch (err) {
      console.error('Error al cargar agricultores:', err);
      setError('Error al cargar los agricultores');
      setFarmers([]);
    } finally {
      setLoading(false);
    }
  };

  // Cargar un agricultor por ID
  const loadFarmer = async (id) => {
    try {
      setLoading(true);
      const { data, error: fetchError } = await farmerService.getFarmerById(id);
      
      if (fetchError) {
        throw new Error(fetchError);
      }
      
      setCurrentFarmer(data);
      setError(null);
      return data;
    } catch (err) {
      console.error('Error al cargar el agricultor:', err);
      setError('Error al cargar el agricultor');
      setCurrentFarmer(null);
      return null;
    } finally {
      setLoading(false);
    }
  };

  // Crear un nuevo agricultor
  const createFarmer = async (farmerData) => {
    try {
      setLoading(true);
      const { data, error: createError } = await farmerService.createFarmer(farmerData);
      
      if (createError) {
        throw new Error(createError);
      }
      
      // Actualizar la lista de agricultores
      await loadFarmers();
      setError(null);
      return { success: true, data };
    } catch (err) {
      console.error('Error al crear el agricultor:', err);
      setError('Error al crear el agricultor');
      return { success: false, error: err.message };
    } finally {
      setLoading(false);
    }
  };

  // Actualizar un agricultor existente
  const updateFarmer = async (id, updates) => {
    try {
      setLoading(true);
      const { data, error: updateError } = await farmerService.updateFarmer(id, updates);
      
      if (updateError) {
        throw new Error(updateError);
      }
      
      // Actualizar la lista de agricultores
      await loadFarmers();
      setError(null);
      return { success: true, data };
    } catch (err) {
      console.error('Error al actualizar el agricultor:', err);
      setError('Error al actualizar el agricultor');
      return { success: false, error: err.message };
    } finally {
      setLoading(false);
    }
  };

  // Eliminar un agricultor
  const deleteFarmer = async (id) => {
    try {
      setLoading(true);
      const { success, error: deleteError } = await farmerService.deleteFarmer(id);
      
      if (!success) {
        throw new Error(deleteError || 'Error al eliminar el agricultor');
      }
      
      // Actualizar la lista de agricultores
      await loadFarmers();
      setError(null);
      return { success: true };
    } catch (err) {
      console.error('Error al eliminar el agricultor:', err);
      setError('Error al eliminar el agricultor');
      return { success: false, error: err.message };
    } finally {
      setLoading(false);
    }
  };

  // Cargar los agricultores al montar el componente
  useEffect(() => {
    loadFarmers();
  }, []);

  return (
    <FarmersContext.Provider
      value={{
        farmers,
        currentFarmer,
        loading,
        error,
        loadFarmers,
        loadFarmer,
        createFarmer,
        updateFarmer,
        deleteFarmer,
        setCurrentFarmer,
      }}
    >
      {children}
    </FarmersContext.Provider>
  );
};

// Hook personalizado para usar el contexto
export const useFarmers = () => {
  const context = useContext(FarmersContext);
  if (!context) {
    throw new Error('useFarmers debe usarse dentro de un FarmersProvider');
  }
  return context;
};

export default FarmersContext;
