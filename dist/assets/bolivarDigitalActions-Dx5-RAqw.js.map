{"version":3,"file":"bolivarDigitalActions-Dx5-RAqw.js","sources":["../../src/lib/bolivarDigitalActions.ts"],"sourcesContent":["import { supabase } from './supabase';\n\nexport interface Client {\n  id?: string;\n  fullName: string;\n  cedula: string;\n  rif: string;\n  phone: string;\n  address: string;\n  activity: string;\n}\n\nexport interface ActionResponse {\n  success: boolean;\n  message: string;\n  data?: any;\n  error?: string;\n}\n\nexport const deleteClientAction = async (clientId: string): Promise<ActionResponse> => {\n  try {\n    const { error } = await supabase\n      .from('bolivarDigitalClients')\n      .delete()\n      .eq('id', clientId);\n\n    if (error) throw error;\n\n    return {\n      success: true,\n      message: 'Cliente eliminado exitosamente',\n    };\n  } catch (error: any) {\n    console.error('Error al eliminar cliente:', error);\n    return {\n      success: false,\n      message: 'Error al eliminar el cliente',\n      error: error.message,\n    };\n  }\n};\n\n// State shape used by client-side forms via useActionState\nexport type FormActionState = {\n  success: boolean;\n  message?: string;\n  errors?: Record<string, string>;\n};\n\n// ---- Query helpers (Supabase) ----\nexport async function getClientsList() {\n  const { data, error } = await supabase\n    .from('bolivarDigitalClients')\n    .select('id, fullName, cedula, rif')\n    .order('fullName', { ascending: true });\n  if (error) throw error;\n  return data || [];\n}\n\nexport async function getApprovedParcelas(clientId: string) {\n  // 1) Obtener farmerId del cliente\n  const { data: client, error: clientErr } = await supabase\n    .from('bolivarDigitalClients')\n    .select('farmerId')\n    .eq('id', clientId)\n    .single();\n  if (clientErr) throw clientErr;\n  if (!client?.farmerId) return [];\n\n  // 2) Parcelas vinculadas al farmer con bandera isLinkedToClient\n  const { data: parcelas, error: parcelasErr } = await supabase\n    .from('parcelas')\n    .select('id, name')\n    .eq('farmerId', client.farmerId)\n    .eq('isLinkedToClient', true);\n  if (parcelasErr) throw parcelasErr;\n  if (!parcelas?.length) return [];\n\n  // 3) Para cada parcela, verificar que tenga inspección aprobada y estimación\n  const results: Array<{ id: string; name: string; montoTotalEstimado?: number } | null> = [];\n  for (const p of parcelas) {\n    const { data: insp, error: inspErr } = await supabase\n      .from('inspections')\n      .select('id')\n      .eq('parcelaId', p.id)\n      .eq('status', 'Aprobada')\n      .limit(1)\n      .maybeSingle();\n    if (inspErr) throw inspErr;\n    if (!insp) {\n      results.push(null);\n      continue;\n    }\n\n    const { data: estim, error: estimErr } = await supabase\n      .from('estimaciones')\n      .select('montoTotalEstimado')\n      .eq('parcelaId', p.id)\n      .limit(1)\n      .maybeSingle();\n    if (estimErr) throw estimErr;\n    if (!estim) {\n      results.push(null);\n      continue;\n    }\n\n    results.push({ id: p.id, name: p.name, montoTotalEstimado: estim.montoTotalEstimado });\n  }\n\n  return results.filter(Boolean) as Array<{ id: string; name: string; montoTotalEstimado?: number }>;\n}\n\n// Active financings with client basic info\nexport async function listActiveFinanciamientosWithClient() {\n  const estados = ['Activo', 'En Seguimiento', 'Cosechado', 'Incumplido'];\n  const { data, error } = await supabase\n    .from('bolivarDigitalFinanciamientos')\n    .select('id, clientId, parcelaId, monto, totalPagado, estado, proposito, numeroCosechas')\n    .in('estado', estados)\n    .order('id', { ascending: false });\n  if (error) throw error;\n\n  // Map client names\n  const clientIds = Array.from(new Set((data || []).map((f: any) => f.clientId).filter(Boolean)));\n  let clientsById = new Map<string, { fullName: string }>();\n  if (clientIds.length > 0) {\n    const { data: clients, error: cErr } = await supabase\n      .from('bolivarDigitalClients')\n      .select('id, fullName')\n      .in('id', clientIds);\n    if (cErr) throw cErr;\n    for (const c of clients || []) clientsById.set(c.id, { fullName: c.fullName });\n  }\n\n  return (data || []).map((f: any) => ({ ...f, clientName: clientsById.get(f.clientId)?.fullName }));\n}\n\n// Payments history with joined details\nexport async function listPagosWithDetails() {\n  const { data: pagos, error } = await supabase\n    .from('bolivarDigitalPayments')\n    .select('id, clientId, financiamientoId, fecha, monto, montoRetenido, gananciaAgricultor, metodo')\n    .order('fecha', { ascending: false });\n  if (error) throw error;\n\n  const clientIds = Array.from(new Set((pagos || []).map((p: any) => p.clientId).filter(Boolean)));\n  const financiamientoIds = Array.from(new Set((pagos || []).map((p: any) => p.financiamientoId).filter(Boolean)));\n\n  const [clientsRes, finsRes] = await Promise.all([\n    clientIds.length ? supabase.from('bolivarDigitalClients').select('id, fullName').in('id', clientIds) : Promise.resolve({ data: [], error: null } as any),\n    financiamientoIds.length ? supabase.from('bolivarDigitalFinanciamientos').select('id, proposito').in('id', financiamientoIds) : Promise.resolve({ data: [], error: null } as any),\n  ]);\n  if (clientsRes.error) throw clientsRes.error;\n  if (finsRes.error) throw finsRes.error;\n\n  const clientsById = new Map<string, { fullName: string }>();\n  for (const c of clientsRes.data || []) clientsById.set(c.id, { fullName: c.fullName });\n  const finsById = new Map<string, { proposito: string }>();\n  for (const f of finsRes.data || []) finsById.set(f.id, { proposito: f.proposito });\n\n  return (pagos || []).map((p: any) => ({\n    ...p,\n    clientName: clientsById.get(p.clientId)?.fullName || 'Desconocido',\n    proposito: finsById.get(p.financiamientoId)?.proposito || 'N/A',\n  }));\n}\n\n// Search clients by name or cedula and include their active financings\nexport async function searchClientsWithActiveFinanciamientos(term: string) {\n  const q = term.trim();\n  if (!q) return [] as any[];\n\n  // Basic filters; for better performance create indexes in Supabase and use ilike\n  const [byName, byCedula] = await Promise.all([\n    supabase.from('bolivarDigitalClients').select('id, fullName, cedula, rif').ilike('fullName', `%${q}%`).limit(5),\n    supabase.from('bolivarDigitalClients').select('id, fullName, cedula, rif').ilike('cedula', `%${q}%`).limit(5),\n  ]);\n  if (byName.error) throw byName.error;\n  if (byCedula.error) throw byCedula.error;\n  const clientsMap = new Map<string, any>();\n  for (const c of byName.data || []) clientsMap.set(c.id, c);\n  for (const c of byCedula.data || []) clientsMap.set(c.id, c);\n  const uniqueClients = Array.from(clientsMap.values());\n\n  if (uniqueClients.length === 0) return [];\n\n  const estados = ['Activo', 'En Seguimiento', 'Cosechado', 'Incumplido'];\n  const clientIds = uniqueClients.map(c => c.id);\n  const { data: fins, error: finsErr } = await supabase\n    .from('bolivarDigitalFinanciamientos')\n    .select('id, clientId, monto, totalPagado, estado, proposito, numeroCosechas')\n    .in('clientId', clientIds)\n    .in('estado', estados);\n  if (finsErr) throw finsErr;\n\n  const finsByClient = new Map<string, any[]>();\n  for (const f of fins || []) {\n    if (!finsByClient.has(f.clientId)) finsByClient.set(f.clientId, []);\n    finsByClient.get(f.clientId)!.push(f);\n  }\n\n  return uniqueClients.map(c => ({ ...c, financiamientos: finsByClient.get(c.id) || [] }));\n}\n\n// Action to add/register a financiamiento\nexport async function addFinanciamientoAction(\n  _prevState: FormActionState | null,\n  formData: FormData\n): Promise<FormActionState> {\n  try {\n    const clientId = String(formData.get('clientId') || '');\n    const parcelaId = String(formData.get('parcelaId') || '');\n    const montoStr = String(formData.get('monto') || '');\n    const tasaStr = String(formData.get('tasa') || '');\n    const numeroCosechasStr = String(formData.get('numeroCosechas') || '');\n    const proposito = String(formData.get('proposito') || '');\n\n    const errors: Record<string, string> = {};\n    if (!clientId) errors.clientId = 'Seleccione un sujeto';\n    if (!parcelaId) errors.parcelaId = 'Seleccione una parcela';\n    const monto = Number(montoStr);\n    if (!montoStr || isNaN(monto) || monto <= 0) errors.monto = 'Ingrese un monto válido';\n    const tasa = Number(tasaStr);\n    if (!tasaStr || isNaN(tasa) || tasa <= 0) errors.tasa = 'Ingrese una tasa válida';\n    const numeroCosechas = Number(numeroCosechasStr);\n    if (!numeroCosechasStr || isNaN(numeroCosechas) || numeroCosechas <= 0) errors.numeroCosechas = 'Ingrese un número válido';\n    if (!proposito) errors.proposito = 'Ingrese el propósito';\n\n    if (Object.keys(errors).length > 0) {\n      return { success: false, message: 'Revise los campos', errors };\n    }\n\n    // Persist in Supabase (adjust table/columns to your schema)\n    const { error } = await supabase.from('bolivarDigitalFinanciamientos').insert({\n      clientId,\n      parcelaId,\n      monto,\n      tasa,\n      numeroCosechas,\n      proposito,\n      estado: 'Activo',\n      totalPagado: 0,\n      createdAt: new Date().toISOString(),\n    });\n\n    if (error) throw error;\n\n    return { success: true, message: 'Financiamiento registrado correctamente' };\n  } catch (e: any) {\n    console.error('addFinanciamientoAction error', e);\n    return { success: false, message: 'No se pudo registrar el financiamiento' };\n  }\n}\n\n// Action to add/register a payment for a financiamiento\n// This is a client-friendly wrapper used with useActionState in the UI\nexport async function addPaymentAction(\n  _prevState: FormActionState | null,\n  formData: FormData\n): Promise<FormActionState> {\n  try {\n    const clientId = String(formData.get('clientId') || '');\n    const financiamientoId = String(formData.get('financiamientoId') || '');\n    const fecha = String(formData.get('fecha') || '');\n    const montoStr = String(formData.get('monto') || '');\n    const metodo = String(formData.get('metodo') || '');\n    const referenciaCosecha = String(formData.get('referenciaCosecha') || '');\n\n    const errors: Record<string, string> = {};\n    if (!fecha) errors.fecha = 'La fecha es requerida';\n    const monto = Number(montoStr);\n    if (!montoStr || isNaN(monto) || monto <= 0) errors.monto = 'Ingrese un monto válido';\n    if (!metodo) errors.metodo = 'Seleccione un método de pago';\n    if (!clientId) errors.clientId = 'Falta clientId';\n    if (!financiamientoId) errors.financiamientoId = 'Falta financiamientoId';\n\n    if (Object.keys(errors).length > 0) {\n      return { success: false, message: 'Revise los campos', errors };\n    }\n\n    // Persist using Supabase (simplified example; adjust table/columns to your schema)\n    const { error } = await supabase.from('bolivarDigitalPayments').insert({\n      clientId,\n      financiamientoId,\n      fecha,\n      monto,\n      metodo,\n      referenciaCosecha: referenciaCosecha || null,\n      createdAt: new Date().toISOString(),\n    });\n\n    if (error) throw error;\n\n    return { success: true, message: 'Pago registrado correctamente' };\n  } catch (e: any) {\n    console.error('addPaymentAction error', e);\n    return { success: false, message: 'No se pudo registrar el pago' };\n  }\n}\n\n// Simple stubs for financiamiento actions to let UI work\nexport async function updateFinanciamientoStatusAction(\n  _clientId: string,\n  _financiamientoId: string,\n  _from: string,\n  to: string\n): Promise<ActionResponse> {\n  // TODO: implement Supabase update\n  return { success: true, message: `Estado actualizado a ${to}` };\n}\n\nexport async function approveFinanciamientoAction(\n  _clientId: string,\n  _financiamientoId: string\n): Promise<ActionResponse> {\n  // TODO: implement Supabase approval\n  return { success: true, message: 'Financiamiento aprobado' };\n}\n\nexport async function deleteFinanciamientoAction(\n  _clientId: string,\n  _financiamientoId: string\n): Promise<ActionResponse> {\n  // TODO: implement Supabase delete\n  return { success: true, message: 'Financiamiento eliminado' };\n}\n\nexport async function generateScheduleAction(\n  _prevState: FormActionState | null,\n  formData: FormData\n): Promise<FormActionState> {\n  // Minimal validation and success response\n  const harvestValue = Number(formData.get('harvestValue') || '');\n  const frequency = String(formData.get('frequency') || '');\n  const errors: Record<string, string> = {};\n  if (!harvestValue || isNaN(harvestValue) || harvestValue <= 0) errors.harvestValue = 'Ingrese un valor válido';\n  if (!frequency) errors.frequency = 'Seleccione una frecuencia';\n  if (Object.keys(errors).length) return { success: false, message: 'Revise los campos', errors };\n  // TODO: persist schedule rows in Supabase\n  return { success: true, message: 'Cronograma generado' };\n}\n\nexport const saveClient = async (clientData: any): Promise<ActionResponse> => {\n  try {\n    const { data, error } = await supabase\n      .from('bolivarDigitalClients')\n      .upsert([clientData], { onConflict: 'id' });\n\n    if (error) throw error;\n\n    return {\n      success: true,\n      message: 'Cliente guardado exitosamente',\n      data: data?.[0],\n    };\n  } catch (error: any) {\n    console.error('Error al guardar cliente:', error);\n    return {\n      success: false,\n      message: 'Error al guardar el cliente',\n      error: error.message,\n    };\n  }\n};\n\nexport const getClientById = async (clientId: string): Promise<ActionResponse> => {\n  try {\n    const { data, error } = await supabase\n      .from('bolivarDigitalClients')\n      .select('*')\n      .eq('id', clientId)\n      .single();\n\n    if (error) throw error;\n\n    return {\n      success: true,\n      message: 'Cliente obtenido exitosamente',\n      data,\n    };\n  } catch (error: any) {\n    console.error('Error al obtener cliente:', error);\n    return {\n      success: false,\n      message: 'Error al obtener el cliente',\n      error: error.message,\n    };\n  }\n};\n"],"names":["deleteClientAction","clientId","error","supabase","listActiveFinanciamientosWithClient","estados","data","clientIds","f","clientsById","clients","cErr","c","_a","listPagosWithDetails","pagos","p","financiamientoIds","clientsRes","finsRes","finsById","_b","searchClientsWithActiveFinanciamientos","term","q","byName","byCedula","clientsMap","uniqueClients","fins","finsErr","finsByClient","addPaymentAction","_prevState","formData","financiamientoId","fecha","montoStr","metodo","referenciaCosecha","errors","monto","e","generateScheduleAction","harvestValue","frequency","saveClient","clientData"],"mappings":"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"}